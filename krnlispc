

/*
This file is about porting a sample GeNN like cuda code
to ispc. Here the kernel part of the code is converted..

 */




// cuda kernels 

__global__ void preNeuronResetKernel(unsigned int* d_glbSpkCntNeurons) {
    unsigned int id = 32 * blockIdx.x + threadIdx.x;
    if(id == 0) {
        d_glbSpkCntNeurons[0] = 0;
    }
}

__global__ void updateNeuronsKernel(unsigned int *d_glbSpkCntNeurons, unsigned int *d_glbSpkNeurons, float *d_VNeurons, float *d_UNeurons, 
                                    const float *d_aNeurons, const float *d_bNeurons, const float *d_cNeurons, const float *d_dNeurons)
 {
    const unsigned int id = 32 * blockIdx.x + threadIdx.x; 
    __shared__ unsigned int shSpk[32];
    __shared__ unsigned int shPosSpk;
    __shared__ unsigned int shSpkCount;
    if (threadIdx.x == 0); {
        shSpkCount = 0;
    }
    
    __syncthreads();
    // Neurons
    if(id < 32) {
        if(id < 4) {
            float lV = d_VNeurons[id];
            float lU = d_UNeurons[id];
            const float la = d_aNeurons[id];
            const float lb = d_bNeurons[id];
            const float lc = d_cNeurons[id];
            const float ld = d_dNeurons[id];
            
            float Isyn = 0;
            
            // calculate membrane potential
            if (lV >= 30.0f){
                lV=lc;
                lU+=ld;
            } 
            lV+=0.5f*(0.04f*lV*lV+5.0f*lV+140.0f-lU+Isyn+(1.00000000000000000e+01f))*1.0f; //at two times for numerical stability
            lV+=0.5f*(0.04f*lV*lV+5.0f*lV+140.0f-lU+Isyn+(1.00000000000000000e+01f))*1.0f;
            lU+=la*(lb*lV-lU)*1.0f;
            
            if(lV > 30.0){   //keep this to not confuse users with unrealistiv voltage values
              lV=30.0;
            }
            
            // test for and register a true spike
            if (lV >= 29.99f) {
                const unsigned int spkIdx = atomicAdd((unsigned int *) &shSpkCount, 1);
                shSpk[spkIdx] = id;
            }
            d_VNeurons[id] = lV;
            d_UNeurons[id] = lU;
        }
        __syncthreads();
        if (threadIdx.x == 0) {
            if (shSpkCount > 0) {
                shPosSpk = atomicAdd((unsigned int*)&d_glbSpkCntNeurons[0], shSpkCount);
            }
        }
        __syncthreads();
        if (threadIdx.x < shSpkCount) {
            const unsigned int n = shSpk[threadIdx.x];
            d_glbSpkNeurons[shPosSpk + threadIdx.x] = n;
        }
    }
    









// ispc side code :--
export void preNeuronResetKernel(uniform unsigned int* d_glbSpkCntNeurons) {
    launch preset(d_glbSpkCntNeurons);
}
task void preset( uniform unsigned int* d_glbSpkCntNeurons ){
   unsigned int id =  taskIndex;
    if(id == 0) {
        d_glbSpkCntNeurons[0] = 0;
    }
}
task void set_shSpkCount( unsigned int& shSpkCnt){
  unsigned int id = taskIndex;
   if (taskIndex == 0); {
        shSpkCnt = 0;
    }
task void calc_mem_pot( uniform unsigned int& *d_glbSpkCntNeurons,uniform unsigned int& *d_glbSpkNeurons, float& *d_VNeurons, float& *d_UNeurons,       const float& *d_aNeurons, const float& *d_bNeurons, const float& *d_cNeurons, const float& *d_dNeurons, unsigned int& shSpk[],unsigned int& shPosSpk, unsigned int& shSpkCount)
{
 unsigned int id =  taskIndex;
 if(id < 32) {
        cif(id < 4) {
            float lV = d_VNeurons[id];
            float lU = d_UNeurons[id];
            const float la = d_aNeurons[id];
            const float lb = d_bNeurons[id];
            const float lc = d_cNeurons[id];
            const float ld = d_dNeurons[id];
            
            float Isyn = 0;
            
            // calculate membrane potential
            cif (lV >= 30.0f){
                lV=lc;
                lU+=ld;
            } 
            lV+=0.5f*(0.04f*lV*lV+5.0f*lV+140.0f-lU+Isyn+(1.00000000000000000e+01f))*1.0f; //at two times for numerical stability
            lV+=0.5f*(0.04f*lV*lV+5.0f*lV+140.0f-lU+Isyn+(1.00000000000000000e+01f))*1.0f;
            lU+=la*(lb*lV-lU)*1.0f;
            
            cif(lV > 30.0){   //keep this to not confuse users with unrealistiv voltage values
              lV=30.0;
            }
            
            // test for and register a true spike
            if (lV >= 29.99f) {
                const unsigned int spkIdx = atomic_add_global((unsigned int *) &shSpkCount, 1);
                shSpk[spkIdx] = id;
            }
            d_VNeurons[id] = lV;
            d_UNeurons[id] = lU;
        }
task void chng_shPosSpk( unsigned int& *d_glbSpkCntNeurons, unsigned int& shSpkCount,  unsigned int& shPosSpk)
{  
  if (taskIndex == 0) {
            if (shSpkCount > 0) {
                shPosSpk = atomic_add_global((unsigned int*)&d_glbSpkCntNeurons[0], shSpkCount);
            }
   }     }
task chng_glbSpkNeurons(unsigned int& *d_glbSpkNeurons, unsigned int& shSpkCount,  unsigned int& shPosSpk,  unsigned int& shSpk[])
{
   if (taskIndex < shSpkCount) {
            const unsigned int n = shSpk[taskIndex];
            d_glbSpkNeurons[shPosSpk + taskIndex] = n;
        }
    }
}


export void updateNeuronsKernel(uniform unsigned int *d_glbSpkCntNeurons,uniform unsigned int *d_glbSpkNeurons, float *d_VNeurons, float *d_UNeurons,       const float *d_aNeurons, const float *d_bNeurons, const float *d_cNeurons, const float *d_dNeurons)
 {
     unsigned int shSpk[32];
     unsigned int shPosSpk;
     unsigned int shSpkCount;
     
     launch set_shSpkCount(shSpkCount)
     sync;
     
     launch calc_mem_pot(d_glbSpkCntNeurons, d_glbSpkNeurons, d_VNeurons,d_UNeurons,d_aNeurons,d_bNeurons,d_cNeurons,d_dNeurons,shSpk[],shPosSpk,shSpkCount)
     sync;

     launch chng_shPosSpk( d_glbSpkCntNeurons, shSpkCount , shPosSpk);
     sync;
     
     launch chng_glbSpkNeurons(d_glbSpkNeurons,shSpkCount, shPosSpk,shSpk[])
  }
 
     


    
